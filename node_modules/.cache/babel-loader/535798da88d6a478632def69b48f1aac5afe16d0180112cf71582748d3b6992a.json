{"ast":null,"code":"import jsPDF from 'jspdf';\nimport { saveAs } from 'file-saver';\nconst defaultOptions = {\n  orientation: 'portrait',\n  format: 'a4',\n  quality: 0.8,\n  margin: 10,\n  imagesPerPage: 1\n};\nexport const generatePDF = async (images, filename = 'images-to-pdf', options = {}) => {\n  const opts = {\n    ...defaultOptions,\n    ...options\n  };\n  if (images.length === 0) {\n    throw new Error('No images provided');\n  }\n  const pdf = new jsPDF({\n    orientation: opts.orientation,\n    unit: 'mm',\n    format: opts.format\n  });\n  const pageWidth = pdf.internal.pageSize.getWidth();\n  const pageHeight = pdf.internal.pageSize.getHeight();\n  const contentWidth = pageWidth - opts.margin * 2;\n  const contentHeight = pageHeight - opts.margin * 2;\n  let isFirstPage = true;\n  for (let i = 0; i < images.length; i += opts.imagesPerPage) {\n    if (!isFirstPage) {\n      pdf.addPage();\n    }\n    isFirstPage = false;\n    const pageImages = images.slice(i, i + opts.imagesPerPage);\n    if (opts.imagesPerPage === 1) {\n      // Single image per page\n      const image = pageImages[0];\n      await addImageToPDF(pdf, image, opts.margin, opts.margin, contentWidth, contentHeight, opts.quality);\n    } else {\n      // Multiple images per page (grid layout)\n      const cols = Math.ceil(Math.sqrt(opts.imagesPerPage));\n      const rows = Math.ceil(opts.imagesPerPage / cols);\n      const cellWidth = contentWidth / cols;\n      const cellHeight = contentHeight / rows;\n      for (let j = 0; j < pageImages.length; j++) {\n        const row = Math.floor(j / cols);\n        const col = j % cols;\n        const x = opts.margin + col * cellWidth;\n        const y = opts.margin + row * cellHeight;\n        await addImageToPDF(pdf, pageImages[j], x + 2, y + 2, cellWidth - 4, cellHeight - 4, opts.quality);\n      }\n    }\n  }\n\n  // Save the PDF\n  const pdfBlob = pdf.output('blob');\n  saveAs(pdfBlob, `${filename}.pdf`);\n};\nconst addImageToPDF = async (pdf, imageFile, x, y, maxWidth, maxHeight, quality) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      try {\n        // Calculate dimensions to maintain aspect ratio\n        const aspectRatio = img.width / img.height;\n        let width = maxWidth;\n        let height = maxWidth / aspectRatio;\n        if (height > maxHeight) {\n          height = maxHeight;\n          width = maxHeight * aspectRatio;\n        }\n\n        // Center the image within the available space\n        const centerX = x + (maxWidth - width) / 2;\n        const centerY = y + (maxHeight - height) / 2;\n\n        // Convert image to canvas for better quality control\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n        const dataURL = canvas.toDataURL('image/jpeg', quality);\n        pdf.addImage(dataURL, 'JPEG', centerX, centerY, width, height);\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    };\n    img.onerror = () => {\n      reject(new Error(`Failed to load image: ${imageFile.file.name}`));\n    };\n    img.src = imageFile.preview;\n  });\n};\nexport const getPageDimensions = (format, orientation) => {\n  const formats = {\n    'a4': [210, 297],\n    'letter': [216, 279],\n    'legal': [216, 356]\n  };\n  const [width, height] = formats[format] || formats['a4'];\n  return orientation === 'landscape' ? [height, width] : [width, height];\n};\nexport const estimatePDFSize = (images, options = {}) => {\n  const opts = {\n    ...defaultOptions,\n    ...options\n  };\n  const avgImageSize = images.reduce((sum, img) => sum + img.file.size, 0) / images.length;\n  const compressionRatio = opts.quality;\n  const estimatedSize = avgImageSize * images.length * compressionRatio + images.length * 1024; // Add overhead\n\n  if (estimatedSize < 1024 * 1024) {\n    return `${Math.round(estimatedSize / 1024)} KB`;\n  } else {\n    return `${(estimatedSize / (1024 * 1024)).toFixed(1)} MB`;\n  }\n};","map":{"version":3,"names":["jsPDF","saveAs","defaultOptions","orientation","format","quality","margin","imagesPerPage","generatePDF","images","filename","options","opts","length","Error","pdf","unit","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","contentWidth","contentHeight","isFirstPage","i","addPage","pageImages","slice","image","addImageToPDF","cols","Math","ceil","sqrt","rows","cellWidth","cellHeight","j","row","floor","col","x","y","pdfBlob","output","imageFile","maxWidth","maxHeight","Promise","resolve","reject","img","Image","onload","aspectRatio","width","height","centerX","centerY","canvas","document","createElement","ctx","getContext","drawImage","dataURL","toDataURL","addImage","error","onerror","file","name","src","preview","getPageDimensions","formats","estimatePDFSize","avgImageSize","reduce","sum","size","compressionRatio","estimatedSize","round","toFixed"],"sources":["/home/niroj/Desktop/react/image-to-pdf-converter/src/utils/pdfGenerator.ts"],"sourcesContent":["import jsPDF from 'jspdf';\nimport { saveAs } from 'file-saver';\n\ninterface ImageFile {\n  file: File;\n  preview: string;\n  id: string;\n}\n\ninterface PDFOptions {\n  orientation: 'portrait' | 'landscape';\n  format: 'a4' | 'letter' | 'legal';\n  quality: number;\n  margin: number;\n  imagesPerPage: number;\n}\n\nconst defaultOptions: PDFOptions = {\n  orientation: 'portrait',\n  format: 'a4',\n  quality: 0.8,\n  margin: 10,\n  imagesPerPage: 1\n};\n\nexport const generatePDF = async (\n  images: ImageFile[], \n  filename: string = 'images-to-pdf',\n  options: Partial<PDFOptions> = {}\n): Promise<void> => {\n  const opts = { ...defaultOptions, ...options };\n  \n  if (images.length === 0) {\n    throw new Error('No images provided');\n  }\n\n  const pdf = new jsPDF({\n    orientation: opts.orientation,\n    unit: 'mm',\n    format: opts.format\n  });\n\n  const pageWidth = pdf.internal.pageSize.getWidth();\n  const pageHeight = pdf.internal.pageSize.getHeight();\n  const contentWidth = pageWidth - (opts.margin * 2);\n  const contentHeight = pageHeight - (opts.margin * 2);\n\n  let isFirstPage = true;\n\n  for (let i = 0; i < images.length; i += opts.imagesPerPage) {\n    if (!isFirstPage) {\n      pdf.addPage();\n    }\n    isFirstPage = false;\n\n    const pageImages = images.slice(i, i + opts.imagesPerPage);\n    \n    if (opts.imagesPerPage === 1) {\n      // Single image per page\n      const image = pageImages[0];\n      await addImageToPDF(pdf, image, opts.margin, opts.margin, contentWidth, contentHeight, opts.quality);\n    } else {\n      // Multiple images per page (grid layout)\n      const cols = Math.ceil(Math.sqrt(opts.imagesPerPage));\n      const rows = Math.ceil(opts.imagesPerPage / cols);\n      const cellWidth = contentWidth / cols;\n      const cellHeight = contentHeight / rows;\n\n      for (let j = 0; j < pageImages.length; j++) {\n        const row = Math.floor(j / cols);\n        const col = j % cols;\n        const x = opts.margin + (col * cellWidth);\n        const y = opts.margin + (row * cellHeight);\n        \n        await addImageToPDF(\n          pdf, \n          pageImages[j], \n          x + 2, \n          y + 2, \n          cellWidth - 4, \n          cellHeight - 4, \n          opts.quality\n        );\n      }\n    }\n  }\n\n  // Save the PDF\n  const pdfBlob = pdf.output('blob');\n  saveAs(pdfBlob, `${filename}.pdf`);\n};\n\nconst addImageToPDF = async (\n  pdf: jsPDF,\n  imageFile: ImageFile,\n  x: number,\n  y: number,\n  maxWidth: number,\n  maxHeight: number,\n  quality: number\n): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    \n    img.onload = () => {\n      try {\n        // Calculate dimensions to maintain aspect ratio\n        const aspectRatio = img.width / img.height;\n        let width = maxWidth;\n        let height = maxWidth / aspectRatio;\n\n        if (height > maxHeight) {\n          height = maxHeight;\n          width = maxHeight * aspectRatio;\n        }\n\n        // Center the image within the available space\n        const centerX = x + (maxWidth - width) / 2;\n        const centerY = y + (maxHeight - height) / 2;\n\n        // Convert image to canvas for better quality control\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n\n        const dataURL = canvas.toDataURL('image/jpeg', quality);\n        \n        pdf.addImage(dataURL, 'JPEG', centerX, centerY, width, height);\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    img.onerror = () => {\n      reject(new Error(`Failed to load image: ${imageFile.file.name}`));\n    };\n\n    img.src = imageFile.preview;\n  });\n};\n\nexport const getPageDimensions = (format: string, orientation: string) => {\n  const formats: Record<string, [number, number]> = {\n    'a4': [210, 297],\n    'letter': [216, 279],\n    'legal': [216, 356]\n  };\n\n  const [width, height] = formats[format] || formats['a4'];\n  return orientation === 'landscape' ? [height, width] : [width, height];\n};\n\nexport const estimatePDFSize = (images: ImageFile[], options: Partial<PDFOptions> = {}): string => {\n  const opts = { ...defaultOptions, ...options };\n  const avgImageSize = images.reduce((sum, img) => sum + img.file.size, 0) / images.length;\n  const compressionRatio = opts.quality;\n  const estimatedSize = (avgImageSize * images.length * compressionRatio) + (images.length * 1024); // Add overhead\n  \n  if (estimatedSize < 1024 * 1024) {\n    return `${Math.round(estimatedSize / 1024)} KB`;\n  } else {\n    return `${(estimatedSize / (1024 * 1024)).toFixed(1)} MB`;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}